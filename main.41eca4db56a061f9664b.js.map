{"version":3,"sources":["webpack:///./js/timer.js"],"names":["timer","selector","targetDate","this","createMarkup","mappedTimers","map","itemRef","document","createElement","classList","add","insertAdjacentHTML","toLowerCase","createItem","divRef","id","append","querySelector","insertAdjacentElement","start","eventTime","getTime","setInterval","currentTime","Date","now","deltaTime","updateClockFace","time","days","pad","Math","floor","hours","mins","secs","refs","daysTimer","hoursTimer","minutesTimer","secondsTimer","textContent","value","String","padStart"],"mappings":"2JAuEQA,EAAQ,I,WAtEZ,cAAsC,IAAxBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACtBC,KAAKF,SAAWA,EAChBE,KAAKD,WAAaA,E,2BAGpBE,aAAA,WACE,IAeMC,EAfS,CAAC,OAAQ,QAAS,UAAW,WAehBC,KAAI,SAACN,GAAD,OAbb,SAACA,GAClB,IAAMO,EAAUC,SAASC,cAAc,OAUvC,OATAF,EAAQG,UAAUC,IAAI,SACtBJ,EAAQK,mBACN,aADF,mCAEqCZ,EAAMa,cAF3C,aAIAN,EAAQK,mBACN,YADF,uBAEyBZ,EAFzB,WAIOO,EAEkCO,CAAWd,MAEhDe,EAASP,SAASC,cAAc,OACtCM,EAAOL,UAAUC,IAAI,SACrBI,EAAOC,GAAK,WACZD,EAAOE,OAAP,MAAAF,EAAiBV,GAEJG,SAASU,cAAc,QAC/BC,sBAAsB,aAAcJ,I,EAG3CK,MAAA,WAAQ,WACAC,EAAYlB,KAAKD,WAAWoB,UAElCC,aAAY,WACV,IAAMC,EAAcC,KAAKC,MAEnBC,EAAYN,EAAYG,EAE9B,EAAKI,gBAAgBD,KACpB,M,EAGLC,gBAAA,SAAgBC,GACd,IAAMC,EAAO3B,KAAK4B,IAAIC,KAAKC,MAAMJ,EAAO,QAClCK,EAAQ/B,KAAK4B,IACjBC,KAAKC,MAAOJ,EAAO,MAAR,OAEPM,EAAOhC,KAAK4B,IAAIC,KAAKC,MAAOJ,EAAO,KAAR,MAC3BO,EAAOjC,KAAK4B,IAAIC,KAAKC,MAAOJ,EAAO,IAAe,MAElDQ,EAAO,CACXC,UAAW9B,SAASU,cAAc,uBAClCqB,WAAY/B,SAASU,cAAc,wBACnCsB,aAAchC,SAASU,cAAc,0BACrCuB,aAAcjC,SAASU,cAAc,2BAGvCmB,EAAKC,UAAUI,YAAf,GAAgCZ,EAChCO,EAAKE,WAAWG,YAAhB,GAAiCR,EACjCG,EAAKG,aAAaE,YAAlB,GAAmCP,EACnCE,EAAKI,aAAaC,YAAlB,GAAmCN,G,EAGrCL,IAAA,SAAIY,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,M,KAIvB,CAAmB,CAC/B5C,SAAU,WACVC,WAAY,IAAIuB,KAAK,iBAGvBzB,EAAMI,eACNJ,EAAMoB,U","file":"main.41eca4db56a061f9664b.js","sourcesContent":["class CountdownTimer {\n    constructor({ selector, targetDate }) {\n      this.selector = selector;\n      this.targetDate = targetDate;\n    }\n  \n    createMarkup() {\n      const timers = [\"Days\", \"Hours\", \"Minutes\", \"Seconds\"];\n  \n      const createItem = (timer) => {\n        const itemRef = document.createElement(\"div\");\n        itemRef.classList.add(\"field\");\n        itemRef.insertAdjacentHTML(\n          \"afterbegin\",\n          `<span class=\"value\" data-value=\"${timer.toLowerCase()}\"></span>`\n        );\n        itemRef.insertAdjacentHTML(\n          \"beforeend\",\n          `<span class=\"label\">${timer}</span>`\n        );\n        return itemRef;\n      };\n      const mappedTimers = timers.map((timer) => createItem(timer));\n  \n      const divRef = document.createElement(\"div\");\n      divRef.classList.add(\"timer\");\n      divRef.id = \"#timer-1\";\n      divRef.append(...mappedTimers);\n  \n      const body = document.querySelector(\"body\");\n      body.insertAdjacentElement(\"afterbegin\", divRef);\n    }\n  \n    start() {\n      const eventTime = this.targetDate.getTime();\n  \n      setInterval(() => {\n        const currentTime = Date.now();\n  \n        const deltaTime = eventTime - currentTime;\n  \n        this.updateClockFace(deltaTime);\n      }, 1000);\n    }\n  \n    updateClockFace(time) {\n      const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n      const hours = this.pad(\n        Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n      );\n      const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n      const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n  \n      const refs = {\n        daysTimer: document.querySelector('[data-value=\"days\"]'),\n        hoursTimer: document.querySelector('[data-value=\"hours\"]'),\n        minutesTimer: document.querySelector('[data-value=\"minutes\"]'),\n        secondsTimer: document.querySelector('[data-value=\"seconds\"]'),\n      };\n  \n      refs.daysTimer.textContent = `${days}`;\n      refs.hoursTimer.textContent = `${hours}`;\n      refs.minutesTimer.textContent = `${mins}`;\n      refs.secondsTimer.textContent = `${secs}`;\n    }\n  \n    pad(value) {\n      return String(value).padStart(2, \"0\");\n    }\n  }\n  \n  const timer = new CountdownTimer({\n    selector: \"#timer-1\",\n    targetDate: new Date(\"Apr 5, 2021\"),\n  });\n  \n  timer.createMarkup();\n  timer.start();\n  "],"sourceRoot":""}